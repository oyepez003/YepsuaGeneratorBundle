
    /**
     * Lists all {{ entity }} entities.
     *
{% if 'annotation' == format %}
     * @Route("/", name="{{ route_name_prefix }}")
     * @Method("GET")
     * @Template()
{% endif %}
     */
    public function indexAction()
    {
        $grid = new Grid('{{ entity|lower }}','list.view.grid.title');
        $grid->setUrl($this->generateUrl('{{ route_name_prefix }}_data'));
        $grid->setTranslator($this->get('translator'), '{{ bundle ~ '_' ~ entity}}');
        {% if not ('new' in actions) and not ('edit' in actions) and not ('delete' in actions) -%}
        $grid->noWriteActions();
        {% endif -%}
        $grid->createView();
      {%- if not associationMappings is empty  %}

        $grid->setEntityManager($this->getDoctrine()->getManager());
      {%- endif %}

        
        $fields = array(
      {%- for field, metadata in fields -%}
      {%- if metadata.id is defined %}

          '{{ entity|lower }}.{{field}}' => array('hidden' => true),
      {%- else %}

          '{{ entity|lower }}.{{field}}' => '{{ field|title }}',
      {%- endif %}
      {% endfor -%}
      {% for association in associationMappings %}
        {% set fieldName = association.fieldName %}

          '{{fieldName}}.id' => array('title' => '{{ fieldName|title }}', 'association' => '{{association.targetEntity}}'),
      {%- endfor %}
  
        );
  
        $grid->setArrayGridField($fields);
        
{% if 'annotation' == format %}
        return array(
            'grid' => $grid
        );
{% else %}
        return $this->render('{{ bundle }}:{{ entity|replace({'\\': '/'}) }}:index.html.twig', array(
            'grid' => $grid,
        ));
{% endif %}
    }
  
    /**
     * Public service - All {{ entity_class }} entities
{% if 'annotation' == format %}
     * @Route("/data", name="{{ route_name_prefix }}_data")
     * @Method("GET")
{% endif %}
     */
    public function dataAction()
    {
        try{
            $request = $this->getRequest();
            if(!$request->isXmlHttpRequest()){
                return $this->redirect($this->generateUrl('{{ route_name_prefix }}'));
            }
            
            JQuery::useComponent(JQueryConstant::COMPONENT_JQGRID);
            $em = $this->getDoctrine()->getManager();
            $orderBy = $request->get('sidx');
            $page = $request->get("page", 1);
            $rows = $request->get("rows", 1);
            $sord = $request->get('sord', 'ASC');
            $filters = $request->get('filters', null);
            $response = new GridResponse();
            
            $repository = $em->getRepository('{{ bundle }}:{{ entity }}');
            $count = Dao::count($repository);
            
            if($count > 0){
                $query = Dao::buildQuery($repository, '{{ entity|lower }}', $orderBy, $sord, $filters);
                {% for association in associationMappings -%}
                $query = $query->leftJoin('{{ entity|lower }}.{{ association.fieldName }}','{{ association.fieldName }}');
                {% endfor -%}
                $query->setMaxResults($rows)->setFirstResult(($page - 1) * $rows);
                $entities = $query->getQuery()->getResult();
                
                foreach ($entities as $entitie){
                    $row = new GridRow();
                    $row->setId($entitie->getId());
    {%- for field, metadata in fields %}
      {%- if '_' in field -%}
        {%- set fieldName = field|replace({'_': ' '})|title|replace({' ': ''}) -%}
      {%- else -%}
        {%- set fieldName = '' -%}
        {%- for char in field|split('') -%}
          {%- if loop.first -%} 
            {%- set char = char|upper -%}
          {%- endif -%}
          {%- set fieldName = fieldName ~ char -%}
        {%- endfor -%}
      {%- endif -%}
      {%- if metadata.type in ['date', 'datetime'] %}
      
                    if($entitie->get{{fieldName}}() !== null){
                        $row->newCell($entitie->get{{fieldName}}()->format('Y-m-d H:i:s'));
                    }else{
                        $row->newCell($entitie->get{{fieldName}}());
                    }
      {%- elseif metadata.type == 'boolean' %}
      
                    $row->newCell($entitie->is{{fieldName}}());
      {%- else %}

                    $row->newCell($entitie->get{{fieldName}}());
      {%- endif -%}
    {%- endfor %}
    {%- for association in associationMappings %}
     {# for key in association|keys %}
        {{ key }}: {{ association[key] }}
     {% endfor #}
     
                    $row->newCell(ObjectUtil::__toString__($entitie->get{{association.fieldName|replace({'_': ' '})|title|replace({' ': ''})}}()));
                
    {%- endfor %}
    
                    $response->addGridRow($row);
                }
            }
            
            $totalRows = $count / $rows;
            $totalRows = is_real($totalRows) ? intval($totalRows) + 1 : intval($totalRows);
            $response->setTotal($totalRows);
            $response->setPage($page);
            $response->setRecords($count);

            return new Response($response->buildResponseAsJSON());
        }catch(\Exception $e){
            $this->get('logger')->crit($e->getMessage());
            return new Response(Notification::error($e->getMessage()), 203);
        }
    }
